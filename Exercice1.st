Object subclass: #MyLine	instanceVariableNames: 'begin end'	classVariableNames: ''	package: 'Exercice1'!!MyLine methodsFor: 'initialization' stamp: 'Celinounette 10/6/2022 21:26'!initialize super initialize.begin:= MyPoint new.end:= MyPoint new.! !!MyLine methodsFor: 'printing' stamp: 'Celinounette 10/7/2022 09:40'!printOn: aStream 	aStream 		nextPut: $(;		nextPutAll: begin x asString;		nextPut: $,;		nextPutAll: begin y asString;		nextPutAll: ')->(';		nextPutAll: end x asString;		nextPut: $,;		nextPutAll: end y asString;		nextPut: $).! !!MyLine methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 21:05'!begin	^begin! !!MyLine methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 21:06'!end	^end! !!MyLine methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 21:08'!begin: point	begin:=point.! !!MyLine methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 21:09'!end: point	end:=point.! !!MyLine methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 21:43'!length 	^(((begin x-end x)**2)+((begin y-end y)**2))sqrt! !!MyLine methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 23:33'!gradient 	|gradient|	(begin x = end x)	ifTrue:[^0];	ifFalse:[gradient := ((begin y - end y)/(begin x - end x)). ^gradient].		! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyLine class	instanceVariableNames: ''!!MyLine class methodsFor: 'as yet unclassified' stamp: 'Celinounette 10/6/2022 21:16'!begin:blibli end:blabla		|line|	line := MyLine new.		line begin: blibli.	line end: blabla.			^line 	! !TestCase subclass: #MyLineTest	instanceVariableNames: ''	classVariableNames: ''	package: 'Exercice1'!!MyLineTest methodsFor: 'tests' stamp: 'Celinounette 10/6/2022 23:52'!testInvariantGradient 	|line linit begin end|	begin := MyPoint x:0 y:3.	end := MyPoint x:1 y:4.		line := MyLine begin:begin end:end.	linit := MyLine begin:end end:begin.		self assert: line gradient equals: linit gradient.! !!MyLineTest methodsFor: 'tests' stamp: 'Celinounette 10/6/2022 23:45'!testCreateMyLine 	|line linit begin end|	begin := MyPoint x:0 y:3.	end := MyPoint x:1 y:4.		line := MyLine begin:begin end:end.		self assert: line begin equals: begin;	assert: line end equals: end.		linit := MyLine new.		self assert: linit begin x equals: 0;	assert: linit begin y equals: 0;	assert: linit end x equals: 0;	assert: linit end y equals:0.	! !!MyLineTest methodsFor: 'tests' stamp: 'Celinounette 10/7/2022 09:37'!testPrintOn 	|line|	line:= MyLine new.		self assert: line asString equals: '(0,0)->(0,0)'.! !!MyLineTest methodsFor: 'tests' stamp: 'Celinounette 10/6/2022 23:31'!testGradientException	|line begin end|	begin := MyPoint x:0 y:0.	end := MyPoint x:0 y:4.		line:= MyLine begin: begin end: end.		self assert: line gradient equals: 0.! !!MyLineTest methodsFor: 'tests' stamp: 'Celinounette 10/6/2022 23:29'!testGradientNull	|line begin end|	begin := MyPoint x:0 y:0.	end := MyPoint x:4 y:0.		line:= MyLine begin: begin end: end.		self assert: line gradient equals: 0.! !!MyLineTest methodsFor: 'tests' stamp: 'Celinounette 10/6/2022 23:22'!testLength 	|line begin end|	begin := MyPoint x:0 y:0.	end := MyPoint x:4 y:3.		line := MyLine begin: begin end: end.		self assert: line length equals: 5. ! !!MyLineTest methodsFor: 'tests' stamp: 'Celinounette 10/6/2022 23:27'!testGradient 	|line begin end|	begin := MyPoint x:0 y:0.	end := MyPoint x:4 y:3.		line:= MyLine begin: begin end: end.		self assert: line gradient equals: 0.75.! !Object subclass: #MyPoint	instanceVariableNames: 'x y'	classVariableNames: ''	package: 'Exercice1'!!MyPoint methodsFor: 'printing' stamp: 'Celinounette 10/6/2022 21:30'!printOn: aStream	aStream 		nextPut: $(;		nextPutAll: x asString;		nextPut: $,;		nextPutAll: y asString;		nextPut: $).! !!MyPoint methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 20:36'!x 	^x	! !!MyPoint methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 20:38'!x: xfloat	x := xfloat.! !!MyPoint methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 20:39'!y: yfloat	y:=yfloat.! !!MyPoint methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 20:37'!y	^y	! !!MyPoint methodsFor: 'initialization' stamp: 'Celinounette 10/6/2022 21:23'!initialize super initialize. x:=0.y:=0.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyPoint class	instanceVariableNames: ''!!MyPoint class methodsFor: 'instance creation' stamp: 'Celinounette 10/6/2022 21:01'!x: blibli y: blabla		|point| 	point := MyPoint new.		point x: blibli.	point y: blabla.		^point! !TestCase subclass: #MyPointTest	instanceVariableNames: 'x y'	classVariableNames: ''	package: 'Exercice1'!!MyPointTest methodsFor: 'tests' stamp: 'Celinounette 10/7/2022 07:41'!testCreateMyPoint 	|point pinit x0 y0|		pinit  := MyPoint new.		point := MyPoint x:x0 y:y0.		self assert: point x equals: x0;	assert: point y equals: y0.		pinit:= MyPoint new.		self assert: pinit x equals: 0;	assert: pinit y equals: 0.! !!MyPointTest methodsFor: 'tests' stamp: 'Celinounette 10/7/2022 09:33'!testPrintOn	|point|	point := MyPoint new.		self assert: point asString equals: '(0,0)'.! !
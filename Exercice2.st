TestCase subclass: #MyCircleTest	instanceVariableNames: 'radius'	classVariableNames: ''	package: 'Exercice2'!!MyCircleTest methodsFor: 'tests' stamp: 'Celinounette 10/7/2022 08:24'!testMyCircleArea	|circle rayon|	rayon:=3.	circle:= MyCircle radius:rayon.		self assert: circle area equals: 9*(Float pi).	! !!MyCircleTest methodsFor: 'tests' stamp: 'Celinounette 10/7/2022 08:07'!testCreateMyCircle	|circle  rayon cinit|	rayon:= 12.	circle:= MyCircle radius:rayon.	self assert: circle radius equals: rayon.		cinit:= MyCircle new.		self assert: cinit radius equals: 0.! !!MyCircleTest methodsFor: 'tests' stamp: 'Celinounette 10/7/2022 08:20'!testMyCirclePerimeter	|circle rayon|	rayon:=3/(Float pi).	circle:= MyCircle radius:rayon.		self assert: circle perimeter equals: 6.		! !TestCase subclass: #MyRectangleTest	instanceVariableNames: 'width length'	classVariableNames: ''	package: 'Exercice2'!!MyRectangleTest methodsFor: 'tests' stamp: 'Celinounette 10/7/2022 08:37'!testMyRectanglePerimeter	|rect longueur largeur|	longueur:=3.	largeur:=12.	rect:= MyRectangle length:longueur width:largeur.	self assert: rect perimeter equals: 30.! !!MyRectangleTest methodsFor: 'tests' stamp: 'Celinounette 10/7/2022 08:37'!testMyRectangleArea	|rect longueur largeur|	longueur:=3.	largeur:=12.	rect:= MyRectangle length:longueur width:largeur.	self assert: rect area equals: 36.! !!MyRectangleTest methodsFor: 'tests' stamp: 'Celinounette 10/7/2022 08:34'!testCreateMyRectangle	|rect  longueur largeur rinit|	longueur:= 10.	largeur:=5.	rect:= MyRectangle length:longueur width:largeur.		self assert: rect length equals: longueur;	assert: rect width equals:largeur.		rinit:= MyRectangle new.		self assert: rinit length equals: 0;	assert: rinit width equals:0.! !Object subclass: #MyShape	instanceVariableNames: 'color isFilled'	classVariableNames: ''	package: 'Exercice2'!!MyShape methodsFor: 'initialization' stamp: 'Celinounette 10/6/2022 22:15'!initialize 	super initialize.		color := 'Yellow'.	isFilled := true.! !!MyShape methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:12'!perimeter 	self subclassResponsibility ! !!MyShape methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:05'!isFilled	^isFilled! !!MyShape methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:09'!isFilled: bool	isFilled:=bool.! !!MyShape methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:07'!color: gnagnagna	color:= gnagnagna.! !!MyShape methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:11'!area 	self subclassResponsibility ! !!MyShape methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:04'!color	^color! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyShape class	instanceVariableNames: ''!!MyShape class methodsFor: 'as yet unclassified' stamp: 'Celinounette 10/6/2022 22:21'!color: gnegne isFilled: bool		|shape|	shape:= MyShape new.	 	shape color: gnegne.	shape isFilled: bool.		^shape ! !MyShape subclass: #MyCircle	instanceVariableNames: 'radius'	classVariableNames: ''	package: 'Exercice2'!!MyCircle methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:31'!initialize super initialize.radius:=0.! !!MyCircle methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:25'!radius:gnegne	radius:=gnegne.! !!MyCircle methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:24'!radius 	^radius! !!MyCircle methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:30'!perimeter 	^(2*Float pi*radius)! !!MyCircle methodsFor: 'accessing' stamp: 'Celinounette 10/7/2022 08:23'!area 	^(Float pi*((radius)**2))! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyCircle class	instanceVariableNames: ''!!MyCircle class methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:36'!radius: gnegne 		|circle|	circle := MyCircle new.		circle radius: gnegne.		^circle 	! !MyShape subclass: #MyRectangle	instanceVariableNames: 'width length'	classVariableNames: ''	package: 'Exercice2'!!MyRectangle methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:44'!initialize super initialize.length:=0.width:=0.! !!MyRectangle methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:41'!width:gnigni	width:=gnigni.! !!MyRectangle methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:40'!width	^width! !!MyRectangle methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:41'!length:gnougnou	length:=gnougnou.! !!MyRectangle methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:46'!perimeter	^(2*(width+length))! !!MyRectangle methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:40'!length	^length! !!MyRectangle methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:45'!area 	^(width*length)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyRectangle class	instanceVariableNames: ''!!MyRectangle class methodsFor: 'as yet unclassified' stamp: 'Celinounette 10/6/2022 22:54'!length: gnigni width: gnougnou	|rectangle|	rectangle := MyRectangle new.	rectangle length: gnigni.	rectangle width: gnougnou.			^rectangle! !TestCase subclass: #MyShapeTest	instanceVariableNames: 'color isFilled'	classVariableNames: ''	package: 'Exercice2'!!MyShapeTest methodsFor: 'tests' stamp: 'Celinounette 10/7/2022 07:57'!testCreateMyShape	|shape shinit colori filled|	colori:= 'Green'.	filled := false.	shape:= MyShape color:colori isFilled:filled.	self assert: shape color equals: colori;	assert: shape isFilled equals: filled.		shinit:= MyShape new.		self assert: shinit color equals: 'Yellow';	assert: shinit isFilled equals: true.! !MyRectangle subclass: #MySquare	instanceVariableNames: 'side'	classVariableNames: ''	package: 'Exercice2'!!MySquare methodsFor: 'printing' stamp: 'Celinounette 10/6/2022 23:05'!initialize super initialize.side:=0.! !!MySquare methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:56'!side	^side! !!MySquare methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:58'!perimeter	^(4*side)! !!MySquare methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:59'!area	^(side**2)! !!MySquare methodsFor: 'accessing' stamp: 'Celinounette 10/6/2022 22:57'!side: gnognogno	side:=gnognogno.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MySquare class	instanceVariableNames: ''!!MySquare class methodsFor: 'accessing' stamp: 'Celinounette 10/7/2022 08:46'!side: gnougnougnou	|square|	square:= MySquare new.	square side: gnougnougnou.		^square! !TestCase subclass: #MySquareTest	instanceVariableNames: 'side'	classVariableNames: ''	package: 'Exercice2'!!MySquareTest methodsFor: 'tests' stamp: 'Celinounette 10/7/2022 08:57'!testMySquarePerimeter	|carre cote|	cote:=3.	carre:= MySquare side:cote.	self assert: carre perimeter equals: 12.! !!MySquareTest methodsFor: 'tests' stamp: 'Celinounette 10/7/2022 08:43'!testCreateMySquare	|carre cote cainit|	cote:= 10.	carre:= MySquare side:cote.		self assert: carre side equals: cote;	assert: carre side equals:cote.		cainit:= MySquare new.		self assert: cainit side equals: 0.! !!MySquareTest methodsFor: 'tests' stamp: 'Celinounette 10/7/2022 08:57'!testMySquareArea	|carre cote|	cote:=3.	carre:= MySquare side:cote.	self assert: carre area equals: 9.! !